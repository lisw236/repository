

								表结构
  

约束条件:
 -- 限制如何给字段赋值
　　　+---------+---------------------------------+-------+------+-----------+----------+
　　　| Field   | Type                   | Null  | Key | Default  | Extra  |
　　　+---------+---------------------------------+-------+------+-----------+----------+
　　　| name  | char(10)               | YES  |     | NULL    |        |
　　　+---------+---------------------------------+-------+------+-----------+----------+

注释:
　　　|字段名  | 类型                    |   空  |  键值 | 默认值 | 额外设置 |

##########################################################

一.设置约束限制

1.null项:
-- yes:允许为空值
-- no:不允许为空值
-- 空值 & 0个字符 不一样

mysql> create  table  t9 (
        ->	name  char(10)  no null          #不允许空值
	-> );           		 

mysql> insert into  t9 valure (........ , null );        # 空值
mysql> insert into  t9 valure (...... , "" );             # 0个字符



2.key项(键值类型)
      
    普通索引
    唯一索引
    主    键
    全文索引

3.default项(默认值)
-- 向表中插入值时,当没赋值,默认为default的值
-- 默认为空(null)
-- default “a,b” 设置双选

4.extra(额外设置)


##########################################################
#######################

二.修改表结构

   总命令:  alter table  库.表  执行动作
       

      				执行动作:
　　　 					1.添加字段             	add
　　　 					2.修改字段类型		 	modify
　　　					3.修改字段名			change
　　　 					4.删除字段			drop
　　　					5.修改表名			rename

      
###############################################

位置:
       1. after 字段 -----> 字段后添加
       2. First  -----> 第一个
       3. 默认最后一行

1.添加字段
   -- add
   -- 格式: alter table 库名.表名 add 字段名 [约束条件]  [位置];
 
2.修改字段类型
   -- modify
   -- 修改的字段类型不能与已存储的数据冲突
   -- 不修改的部分原样抄下来,否则刷新 
   -- alter table 库名.表名 modify  字段名 类型(宽度) [约束条件]  [位置];

　　　mysql> alter table t9 modify
          -> parts varchar(10) default "456" after name;

3.修改字段名
   -- change
   -- 必须加类型(宽度)
   -- 也可用来修改字段类型
   -- alter table 库.表  change 源字段名 新字段名 类型(宽度) [约束条件];

4.删除字段
  -- drop
  -- 所有列的此字段的值都会被删除
  -- alter table 库.表 drop 字段名 ;

5.修改表名
  -- rename
  -- 表对应的文件名, 也会改变
  -- alter table 表名  rename  新表名 ; 

###############################################################
###########################################


                                   Key项: 键值

键值类型
 -- 根据数据储存要求,选择键值

　　　Index			普通索引
　　　Unique			唯一索引
　　　Fulltext			全文索引
　　　primary key		主键
　　　foreign key		外建

键值的使用: 索引 主键 外键

################################################

一.索引
   -- 给字段的值排队 
   -- 类型: Btree , B+tree , hash

   优点
     -- 加快查询速度
   缺点
 	-- 占物理存储空间(占文件空间)(不是表文件)
　　　-- 降低维护速度(对表中数据修改时,索引也要动态调整)
 	-- 实际情况: 查询次数 > 写|修改次数
　　　
　　　
index 普通索引


规则
 -- 标识: MUL
 -- 一个表可有多个index字段
 -- 字段的值可以: 重复 , null
 -- 通常设置: 查询条件字段 

使用:
     1. 建表时创建索引
        #默认索引名称跟字段名同名
           -- create  table  库.表(
             字段列表 ,
                ndex(字段名) , index(字段名)       #不能加在上面字段后
	         );	 
     2. 已有表里创建索引
		  create   index  索引名  on  表名(字段)
     3. 查看索引字段
		基本查看:  desc  表名 ; key列
		详细查看:  show  index  from  表名   \G;          # \G :  竖着显示	                 
	4. 删除索引
		  drop  index  索引名  on  库.表名

##############################################################

二.主键

　　　操作同为修改表结构
 	   -- alter table 库.表 执行动作

primary key主键

1.使用规则
-- 标识: PRI
-- 字段值不能重复,不能NULL值
-- 默认设置null为no
-- 一个表中只能有一个primary key主键
-- 通常唯一标示设为主键

2.创建主键
    -- 跟随字段:  create table t3 ( name  char(10)  primary key ,  age int );
    -- 最后定义:  create table t3 ( name  char(10) , age int , primary key (name) );
3.已有表添加主键
    -- alter table  库.表  add  primary key(字段);
4.删除主键
　　-- alter table 库.表名 drop primary key;
　　

primary key复合主键

-- ?????????
-- 格式: primary key(字段名,字段名,......)

格式:
 --  create table 表名 (
    -> 字段名列表,
    -> primary key(字段,字段,.....)     # 注意: ()里的不能分开写,否则非复合主键,重复
    -> );
     
创建字段,向表里的复合主键添加新字段:
　　  ①删掉复合主键
　　  ②删掉表内容
　　  ③向表里添加新复合主键

#########################################################




auto_increment 自增长

注意:
-- 标识:自身名字
-- 只能在创建表时用
-- 前提是字段必须为主键
-- 有增长记录:删除表记录后,添加新内容不会从1开始(接着历史增长)

用法:
  1.主键后加自增长
    .........
    -> stu_num  int(11)  primary key  auto_increment,
    -> );

  2.加自增长后,在最后加主键
    .........
    -> stu_num  int(11)  auto_increment,
    -> primary key(stu_num)
    -> );

#####################################################################

 三. 外键

foreign key 外键

!!!!!!!: 只能在建表时使用

功能: 插入记录是,字段值在另一个表字段值范围内选择

使用规则
 -- 源表&目标表,都要加引擎,引擎必须是innodb
 -- 字段类型要一致
 -- 被参照字段必须是索引的一种(primary key)

1.创建外键
  -- create table 表名 ( 
    字段名列表,
　　　foreign key(字段名)  references 表名(字段名)   #指定外键
          on update cascade     #同步更新
          on delete  cascade     #同步删除
     )engine=innodb;       #指定引擎
2.查询外键名
   -- show create table 表名;            #显示表创建命令
      CONSTRAINT ` .... `               # ` `里的是外键名

3.删除外键
   -- alter table 表名 drop foreign key 外键名 ;